ggsave(paste0("../", input_string, "/plot/t.png"), width = 10, height = 6)
setwd("~/Téléchargements/simu/99percent_cloning_rescale/plot")
data = read.csv(paste0("../", "results/pi_", "99percent_cloning_rescale", ".csv"))
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
# Add the alpha column
data = data %>% tibble() %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd)
data
data_chr1 = data %>%
filter(window != 'chr2') %>%
mutate(window = as.numeric(window) / 1000000)
data_chr2 = data %>%
filter(window == 'chr2')
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(data$ymin, data$ymin)),
max(c(data$ymax, data$ymax)))
# Create color palette
num_conditions <- length(unique(data$alpha))
palette_name <- "Dark2"
data_chr2 = data %>%
filter(window == 'chr2')
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(data$ymin, data$ymin)),
max(c(data$ymax, data$ymax)))
# Create color palette
num_conditions <- length(unique(data$alpha))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
# Using the extracted color palette for both geom_line and geom_ribbon
pi_chr1 = ggplot(data_chr1, aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha=0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi),
color = expression(alpha),
fill = expression(alpha),
linetype = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 22),
legend.text = element_text(size = 22)
) +
scale_y_continuous(limits = y_axis_limits)
ggsave(paste0("../", input_string, "/plot/pi_chr1_", input_string, ".png"), plot = pi_chr1, width = 10, height = 6)
pi_chr2 = ggplot(data_chr2, aes(x = alpha, y = mean, color = factor(alpha))) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.1, linewidth = 1.3) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"))+
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18)) +
scale_y_continuous(limits = y_axis_limits) +
guides(color = "none", fill = "none") +
scale_color_manual(values = colors)  # Applying the predefined colors
ggsave(paste0("../", input_string, "/plot/pi_chr2_", input_string, ".png"), plot = pi_chr2, width = 10, height = 6)
pi_chr1
pi_chr2
setwd("~/Documents/meiotic-freq-simulation/figures")
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
rm(list=ls())
# Neutral dataset
data_neutral = read_csv('../data/pi_merged.csv') %>%
filter(s == 0) %>%
filter(window != 'chr2') %>%
mutate(alpha = as.factor(1 / GR)) %>%
filter(alpha %in% c(0.01, 1)) %>%
mutate(ymin = mean - sd, ymax = mean + sd) %>%
mutate(window = as.numeric(window) / 1000000)
data_neutral
# Chromosome 1 w/ sweep
data_chr1 = read_csv('../data/pi_merged.csv') %>%
filter((s == 0.05 & h == 0.5 & rho == '5e-08')) %>%
filter(window != 'chr2') %>%
mutate(alpha = as.factor(1 / GR)) %>%
filter(alpha %in% c(0.01, 1)) %>%
mutate(ymin = mean - sd, ymax = mean + sd) %>%
mutate(window = as.numeric(window) / 1000000)
data_chr1
# Full chromosome 2 positions
data_chr2 = read_csv('../data/pi_full_chr2_ctrl.csv') %>%
mutate(alpha = as.factor(1 / GR)) %>%
filter(alpha %in% c(0.01, 1)) %>%
mutate(ymin = mean - sd, ymax = mean + sd) %>%
mutate(window = as.numeric(window) / 1000000)
data_chr2
data_sln = bind_rows(data_chr1, data_chr2)
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(-1e-5, 8e-05)
# Create color palette
colors <- c("#1B9E77","#E7298A")
library(scales)
# Custom formatter for y-axis to display values divided by 1e-5
scientific_formatter <- function(x) {
x / 1e-5
}
# Using the extracted color palette for both geom_line and geom_ribbon
pi_neutral = data_neutral %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha=0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "along chromosome 1"))+
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 15)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(
limits = y_axis_limits,
labels = scientific_formatter
) +
annotate("text", x = 0.1, y = (max(y_axis_limits)),
label = "x 10^-5", hjust = 1, size = 5)
# Using the extracted color palette for both geom_line and geom_ribbon
pi_neutral = data_neutral %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha=0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "along chromosome 1 (x 10[5])"))+
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 15)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(
limits = y_axis_limits,
labels = scientific_formatter
)
pi_neutral
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 15)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(
limits = y_axis_limits,
labels = scientific_formatter
)
pi_neutral
# Using the extracted color palette for both geom_line and geom_ribbon
pi_neutral = data_neutral %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha=0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "along chromosome 1 (x 10"^-5*")"))
# Using the extracted color palette for both geom_line and geom_ribbon
pi_neutral = data_neutral %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha=0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "along chromosome 1 (x 10"^-5*")")) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 15)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(
limits = y_axis_limits,
labels = scientific_formatter
)
pi_neutral
# Using the extracted color palette for both geom_line and geom_ribbon
pi_sln = data_sln %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha=0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "along the genome"),
color = expression(alpha),
fill = expression(alpha),
linetype = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 18),
axis.text.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20)
) +
scale_y_continuous(limits = y_axis_limits) +
geom_vline(xintercept = 1.0, linetype = "dashed", color = "black")
pi_sln
# Adding labels
plot_sln = ggdraw() +
draw_plot(pi_sln, width = 1, height = 1) +
draw_text("Chromosome 1", x = 0.24, y = 0.92, size = 18, color = "black") +
draw_text("Chromosome 2", x = 0.61, y = 0.92, size = 18, color = "black")
plot_sln
combined_plot <- plot_grid(
pi_neutral,          # First plot
plot_sln,            # Second plot
ncol = 2,
rel_widths = c(1.3, 2.6),
labels = c("A", "B"), label_size = 20
)
combined_plot
png('fig1_2.png', width=14, height=6, units="in",bg = "white", res=600)
combined_plot
dev.off()
setwd("~/Documents/meiotic-freq-simulation/figures")
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
########################################################################
input_string = "maths"
# Function that upload and format the data
data = read.csv(paste0("../script/", input_string, "/results/pi_", input_string, ".csv"))
# Add the alpha column
data = data %>% tibble() %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd)
data
data_chr2 = data %>%
filter(window == 'chr2')
data_chr2
# Step 1: Extract the mean value for alpha = 1 in data_chr2
mean_alpha_1 <- data_chr2 %>%
filter(alpha == 1) %>%
pull(mean)
data_chr2 = data_chr2 %>%
mutate(mean_normalized = mean / mean_alpha_1,
sd_normalized = sd / mean_alpha_1)
data_chr1 = data %>%
filter(window != 'chr2') %>%
mutate(
window = as.numeric(window),
mean_normalized = mean / mean_alpha_1,   # Normalized mean
sd_normalized = sd / mean_alpha_1          # Normalized sd
) %>%
select(-ymin, -ymax, -sd) # remove intermediate columns
data_chr1
data_chr1 = data_chr1 %>%
filter(as.numeric(window) >= 500000) %>%
mutate(
r = 0.5*(1 - exp(-2 * (as.numeric(rho_scaled) * abs((as.numeric(window) - 500000)))))  # r
)
data_chr1
# Define constants
N <- 1000
s <- 0.1
h <- 0.5
# Define the function to calculate pi_pi0
calculate_pi_pi0 <- function(r, alpha) {
gamma <- 2 * N * h * s
Ts1 <- 2 * (1 / gamma) * (log(log(gamma) + 0.5772)) # Ts1 calculation
ts1 <- Ts1 * 2 * N
Ts2 <- (1 / (2 * N * (1-h) * s)) * log(4 * N * (1 -h) * s) # Ts2 calculation
Tsm2 <- (1 / (2 * N * (1-h) * s)) * (log(log(2 * N * (1 - h) * s)) + log(log(2 * N * h * s)) - 0.5 * (1 / alpha) * h * s) # Tsm2 calculation
# Equation for pi_pi0
2 * r * (1 - r) + 1 / (2 * N * alpha) + alpha * ts1 * Tsm2 + (1 - alpha * ts1) * (Ts1 + Ts2)
}
# Generate data for plotting
r_values <- seq(0, 0.5, length.out = 50) # r values from 0 to 0.5
alpha_values <- c(0.004, 0.01) # Different alpha values
theory_data <- do.call(rbind, lapply(alpha_values, function(alpha) {
data.frame(
r = r_values,
pi_pi0 = sapply(r_values, calculate_pi_pi0, alpha = alpha),
alpha = as.factor(alpha),
dataset = "Theoretical"
) %>% as_tibble()
}))
# Filter observed data to match alpha values of interest
observed_data <- data_chr1 %>%
filter(alpha %in% c(0.01, 0.004)) %>%
mutate(dataset = "Simulated", pi_pi0 = mean_normalized) # Rename mean_normalized to pi_pi0
# Combine theoretical and observed data
combined_data <- bind_rows(theory_data, observed_data)
# Plot the data
pi_pi0 = ggplot(combined_data, aes(x = r, y = pi_pi0, color = alpha, linetype = dataset, group = interaction(alpha, dataset))) +
geom_line(linewidth = 1) +
labs(
x = "r",
y = expression("average" ~ pi ~ "/" ~ pi[0] ~ "(chr2)"),
color = expression(alpha),
linetype = "Dataset"
) +
theme_light() +
theme(legend.position = "bottom")
pi_pi0
# Plot the data
pi_pi0 = ggplot(combined_data, aes(x = r, y = pi_pi0, color = alpha, linetype = dataset, group = interaction(alpha, dataset))) +
geom_line(linewidth = 1) +
labs(
x = "r",
y = expression("average" ~ pi ~ "/" ~ pi[0] ~ "(chromosome 1)"),
color = expression(alpha),
linetype = "Dataset"
) +
theme_light() +
theme(legend.position = "bottom")
pi_pi0
# Plot the data
pi_pi0 = ggplot(combined_data, aes(x = r, y = pi_pi0, color = alpha, linetype = dataset, group = interaction(alpha, dataset))) +
geom_line(linewidth = 1) +
labs(
x = "r",
y = expression("average" ~ pi ~ "/" ~ pi[0] ~ "(chromosome 1)"),
color = expression(alpha),
linetype = "Dataset"
) +
theme_light() +
theme(
legend.position = "bottom",
text = element_text(size = 14),          # Increase overall text size
axis.title = element_text(size = 16),    # Increase axis title size
axis.text = element_text(size = 14),     # Increase axis tick label size
legend.text = element_text(size = 14),   # Increase legend text size
legend.title = element_text(size = 16)   # Increase legend title size
)
pi_pi0
ggsave("fig4.png", plot = pi_pi0, width = 10, height = 6)
# Plot the data
pi_pi0 = ggplot(combined_data, aes(x = r, y = pi_pi0, color = alpha, linetype = dataset, group = interaction(alpha, dataset))) +
geom_line(linewidth = 1) +
labs(
x = "r",
y = expression("average" ~ pi ~ "/" ~ pi[0] ~ "(chromosome 1)"),
color = expression(alpha),
linetype = "Dataset"
) +
theme_light() +
theme(
legend.position = "bottom",
text = element_text(size = 16),          # Increase overall text size
axis.title = element_text(size = 18),    # Increase axis title size
axis.text = element_text(size = 16),     # Increase axis tick label size
legend.text = element_text(size = 16),   # Increase legend text size
legend.title = element_text(size = 18)   # Increase legend title size
)
pi_pi0
ggsave("fig4.png", plot = pi_pi0, width = 10, height = 6)
setwd("~/Documents/meiotic-freq-simulation/misc_plot/theo_vs_chr2")
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
rm(list=ls())
data_theory = read_csv('fig3.csv') %>%
filter(window != 'chr2') %>%
filter(!is.na(pi.pi0),) %>%
mutate(rho_scaled = 5e-8, window = as.numeric(window) * 1000000)
data_theory
data_theory = data_theory %>%
filter(s == 0.05) %>%
mutate(
r = 0.5*(1 - exp(-2 * (as.numeric(rho_scaled) * (as.numeric(window)))))  # r
)
data_theory
data_simu = tibble(r = c(0.005, 0.01),
pi.pi0 = c(0.7630981,0.8935787),
sd = c(0.1760563,0.1393178)) # alpha 0.01 et 0.02
ggplot() +
geom_line(data = data_theory, aes(x = r, y = pi.pi0)) +
geom_point(data = data_simu, aes(x = r, y = pi.pi0), color = "red", size = 3) +
geom_errorbar(data = data_simu, aes(x = r, ymin = pi.pi0 - sd, ymax = pi.pi0 + sd), width = 0.001, color = "red") +
labs(x = "r", y = "pi/pi0") +
theme_minimal()
# Subset data for chr2
data_chr2 = read_csv('../../data/pi_merged.csv') %>%
filter(window == 'chr2') %>%
filter(h == 0.5 & rho == '5e-08' & s == 0.05) %>%
mutate(alpha = as.numeric(1 / GR))
data_chr2
ggsave('r_chr2_theory.png')
setwd("~/Documents/meiotic-freq-simulation/figures/supp/ctrl_timefix")
library(ggplot2)
library(sjPlot)
library(RColorBrewer)
library(dplyr)
library(readr)
########################################################################
# Function that upload and format the data
rm(list=ls())
input_string = neutral
input_string = "neutral"
data = read.csv(paste0("../../../", input_string, "/results/t_", input_string, ".csv"))
data = read.csv(paste0("../../../script/", input_string, "/results/t_", input_string, ".csv"))
input_string = "ctrl"
data = read.csv(paste0("../../../script/", input_string, "/results/t_", input_string, ".csv"))
View(data)
# Add the alpha column
data = data %>% tibble() %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd)
data
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(0, max(data$ymax))
# Create color palette
num_conditions <- length(unique(data$alpha))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
t = ggplot(data, aes(x = alpha, y = mean, color = factor(alpha))) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.1, linewidth = 1.3) +
labs(x = expression(alpha),
y = expression("Time to fixation"))+
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18)) +
scale_y_continuous(limits = y_axis_limits) +
guides(color = "none", fill = "none") +
scale_color_manual(values = colors)  # Applying the predefined colors
t
ggsave(paste0("figS1.png"), plot = t, width = 10, height = 6)
