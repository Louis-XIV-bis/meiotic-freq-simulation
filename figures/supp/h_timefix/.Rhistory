scale_fill_brewer(palette="Dark2") +
#scale_y_log10() +
ggsave("/home/lollivier/Documents/Stage_simu/Simulations/neutral_model/LowRecomb/plot/MemoryUsage_Neutral_LowRecomb_50.pdf")
TechStats %>%
ggplot(aes(x=factor(RF), y=MemoryUsage)) +
geom_boxplot() +
geom_jitter(color="black", size=0.2, alpha=0.9) +
theme(axis.text.x = element_blank()) +
labs(title = "Consommation de la mémoire (en Mb) selon le facteur de mise à l'échelle",
x = "Neutral_LowRecomb",
y = "Usage de la mémoire (en Gb)") +
scale_fill_brewer(palette="Dark2") +
#scale_y_log10() +
ggsave("/home/lollivier/Documents/Stage_simu/Simulations/neutral_model/LowRecomb/plot/MemoryUsage_Neutral_LowRecomb_50.pdf")
q()
if (!require('shiny', quietly = T)) install.packages('shiny');
if (!require('shinydashboard', quietly = T)) install.packages('shinydashboard');
if (!require('shiny', quietly = T)) install.packages('shiny');
if (!require('shinybusy', quietly = T)) install.packages('shinybusy');
if (!require('shinycssloaders', quietly = T)) install.packages('shinycssloaders');
if (!require('shinyjs', quietly = T)) install.packages('shinyjs');
if (!require('shinycssloaders', quietly = T)) install.packages('shinycssloaders');
if (!require('shinyjs', quietly = T)) install.packages('shinyjs');
if (!require('shinyalert', quietly = T)) install.packages('shinyalert');
if (!require('BiocManager', quietly = T)) install.packages('BiocManager');
if (!require('BiocManager', quietly = T)) install.packages('BiocManager');
if (!require('Biostrings', quietly = T)) BiocManager::install('Biostrings');
if (!require('Biostrings', quietly = T)) BiocManager::install('Biostrings');
if (!require('biomaRt', quietly = T)) BiocManager::install('biomaRt');
if (!require('biomartr', quietly = T)) install.packages('biomartr');
if (!require('stringr', quietly = T)) install.packages('stringr');
if (!require('stringi', quietly = T)) install.packages('stringi');
if (!require('DT', quietly = T)) install.packages('DT');
if (!require('plotly', quietly = T)) install.packages('plotly');
if (!require('htmlwidgets', quietly = T)) install.packages('htmlwidgets');
if (!require('clusterProfiler', quietly = T)) BiocManager::install('clusterProfiler');
if (!require('pathview', quietly = T)) BiocManager::install('pathview');
if (!require('ReactomePA', quietly = T)) BiocManager::install('ReactomePA');
library(shiny)
library(shinydashboard)
library(shinybusy)
library(shinycssloaders)
library(shinyjs)
library(shinyalert)
library(biomaRt)
library(Biostrings)
library(biomartr)
library(stringr)
library(stringi)
library(DT)
library(plotly)
library(DT)
library(plotly)
library(htmlwidgets)
library(clusterProfiler)
library(pathview)
library(ReactomePA)
if (!require('ReactomePA', quietly = T)) BiocManager::install('ReactomePA');
library(ReactomePA)
library(clusterProfiler)
library(pathview)
getwd()
install.packages("openssl")
install.packages("reprex")
getOption('timeout')
options(timeout=200)
install.packages("reprex")
install.packages("reprex")
if (!require('tidyverse', quietly = T)) install.packages('tidyverse');
library(tidyverse)
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
15700 * 0.02
15700 * 0.05
library(readr)
freq0_all <- read_csv("Documents/Stage_simu/Yeast_simu/stats_ind/para/freq/tests/freq0_all.csv")
58888+59251+60607+59985+10590+60592+11823+10984+11492+59896+59000+10626+10115+11526+19597+17770+17556+17599+17939+17754+18739+57296+11795+59233+57254+11185+58627+60288+19885+11838+58192+17896+11850+11250+
11384+19686+18572+17523+19226+59165+8780+1558+3297+11236+18433+59281+12156+59706+17721+10887+58080+18088+57753+11828+11578+19075+19075
58888+59251+60607+59985+10590+60592+11823+10984+11492+59896+59000+10626+10115+11526+19597+17770+17556+17599+17939
743677+585836
58888+59251+60607+59985+10590+60592+11823+10984+11492+59896+59000+10626+10115+11526+19597+17770+17556+17599+17939
17754+18739+57296+11795+59233+57254+11185+58627+60288+19885+11838+58192+17896+11850+11250+11384+19686+18572+17523
19226+59165+8780+1558+3297+11236+18433+59281+12156+59706+17721+10887+58080+18088+57753+11828+11578+19075+19075
743695/12000000
print('caca')
print("ok")
setwd("~/Documents/projet_sln/plot_paper/var_sln/rho")
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=499)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr2 = pi_table_ctrl %>% filter(windows > 1000000)
pi_table_low = csv_to_tibble(GR_list, "fav", windows)
pi_low_chr2 = pi_table_low %>% filter(windows > 1000000)
pi_table_high = csv_to_tibble(GR_list, "unfav", windows)
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
library(dunn.test)
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=499)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr2 = pi_table_ctrl %>% filter(windows > 1000000)
pi_table_low = csv_to_tibble(GR_list, "fav", windows)
pi_low_chr2 = pi_table_low %>% filter(windows > 1000000)
pi_table_high = csv_to_tibble(GR_list, "unfav", windows)
pi_high_chr2 = pi_table_high %>% filter(windows > 1000000)
kruskal.test(mean ~ factor(submodel), data = pi_ctrl_chr2)
dunn.test(pi_ctrl_chr2$mean, factor(pi_ctrl_chr2$submodel), method = "bonferroni")
kruskal.test(mean ~ factor(submodel), data = pi_low_chr2)
dunn.test(pi_low_chr2$mean, factor(pi_low_chr2$submodel), method = "bonferroni")
kruskal.test(mean ~ factor(submodel), data = pi_high_chr2)
dunn.test(pi_high_chr2$mean, factor(pi_high_chr2$submodel), method = "bonferroni")
# Between each rho for given m #
pi_ctrl_chr2$rho = 5e-8
pi_high_chr2$rho = 1e-7
pi_low_chr2$rho = 1e-8
data_rho = rbind(pi_ctrl_chr2,pi_high_chr2,pi_high_chr2)
# m = 1
data_m1 = data_rho %>% filter(m == 1)
# m = 1
data_m1 = data_rho %>% filter(submodel == 1)
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(pi_ctrl_chr2$ymin, pi_low_chr2$ymin, pi_high_chr2$ymin)),
max(c(pi_ctrl_chr2$ymax, pi_low_chr2$ymax, pi_high_chr2$ymax)))
data_m1
kruskal.test(mean ~ factor(submodel), data = data_m1)
kruskal.test(mean ~ factor(rho), data = data_m1)
# m = 1
data = data_rho %>% filter(submodel == 1)
kruskal.test(mean ~ factor(rho), data = data)
# m = 1
data = data_rho %>% filter(submodel == 0.1)
kruskal.test(mean ~ factor(rho), data = data)
# m = 1
data = data_rho %>% filter(submodel == 0.05)
kruskal.test(mean ~ factor(rho), data = data)
# m = 1
data = data_rho %>% filter(submodel == 0.01)
kruskal.test(mean ~ factor(rho), data = data)
# m = 0.05
data = data_rho %>% filter(submodel == 0.05)
kruskal.test(mean ~ factor(rho), data = data)
# m = 0.05
data = data_rho %>% filter(submodel == 0.05)
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
# m = 0.05
data = data_rho %>% filter(submodel == 0.05)
data
View(data)
# Between each rho for given m #
pi_ctrl_chr2$rho = 5e-8
pi_high_chr2$rho = 1e-7
pi_low_chr2$rho = 1e-8
data_rho = rbind(pi_ctrl_chr2,pi_low_chr2,pi_high_chr2)
# m = 1
data = data_rho %>% filter(submodel == 1)
kruskal.test(mean ~ factor(rho), data = data)
# m = 0.1
data = data_rho %>% filter(submodel == 0.1)
kruskal.test(mean ~ factor(rho), data = data)
# m = 0.05
data = data_rho %>% filter(submodel == 0.05)
data
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
# m = 0.01
data = data_rho %>% filter(submodel == 0.01)
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
data %>% filter(rho = 1e-7) %>% select(mean) %>% mean()
data %>% filter(rho == 1e-7) %>% select(mean) %>% mean()
data_high %>% filter(rho == 1e-7) %>% select(mean)
data_high = data %>% filter(rho == 1e-7) %>% select(mean)
data_high
mean(data_high)
data_high = data %>% filter(rho == 1e-7)
mean(data_high)
mean(data_high$mean)
data_high = data %>% filter(rho == 1e-7)
# m = 0.05
data = data_rho %>% filter(submodel == 0.05)
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
data_high = data %>% filter(rho == 1e-7)
mean(data_high$mean)
data_ctrl = data %>% filter(rho == 5e-8)
mean(data_ctrl$mean)
data_low = data %>% filter(rho == 1e-8)
mean(data_low$mean)
# m = 0.01
data = data_rho %>% filter(submodel == 0.01)
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
# m = 0.05
data = data_rho %>% filter(submodel == 0.05)
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
# m = 0.01
data = data_rho %>% filter(submodel == 0.01)
kruskal.test(mean ~ factor(rho), data = data)
dunn.test(data$mean, factor(data$rho), method = "bonferroni")
data_high = data %>% filter(rho == 1e-7)
mean(data_high$mean)
data_ctrl = data %>% filter(rho == 5e-8)
mean(data_ctrl$mean)
data_low = data %>% filter(rho == 1e-8)
mean(data_low$mean)
setwd("~/Documents/projet_sln/plot_paper/supp/s_timefix")
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('dplyr', quietly = T)) install.packages('dyplr');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('dunn.test', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(sjPlot)
library(RColorBrewer)
library(dplyr)
library(readr)
library(cowplot)
library(dunn.test)
########################################################################
rm(list=ls())
low_100GR <- read.table("fix_100GR_0p02.txt", header = FALSE, col.names = "time")
low_100GR$s = "0.02"
mid_100GR <- read.table("fix_100GR_0p1.txt", header = FALSE, col.names = "time")
mid_100GR$s = "0.1"
high_100GR <- read.table("fix_100GR_0p5.txt", header = FALSE, col.names = "time")
high_100GR$s = "0.5"
merged_100GR <- rbind(low_100GR, mid_100GR, high_100GR)
low_EGR <- read.table("fix_EGR_0p02.txt", header = FALSE, col.names = "time")
low_EGR$s = "0.02"
mean(low_EGR$time -2000)
mid_EGR <- read.table("fix_EGR_0p1.txt", header = FALSE, col.names = "time")
mid_EGR$s = "0.1"
high_EGR <- read.table("fix_EGR_0p5.txt", header = FALSE, col.names = "time")
high_EGR$s = "0.5"
merged_EGR <- rbind(low_EGR, mid_EGR, high_EGR)
p_EGR = ggplot(merged_EGR, aes(x = s, y = time - 2000, fill = s)) +
geom_boxplot() +
labs(x = expression(s),
y = "Fixation time (generations)",
color=expression(s),
fill=expression(s),
linetype=expression(s)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("m = 0.01") +
theme(
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none")
p_EGR
p_100GR = ggplot(merged_100GR, aes(x = s, y = time - 2000, fill = s)) +
geom_boxplot() +
labs(x = expression(s),
y = "Fixation time (generations)",
color=expression(s),
fill=expression(s),
linetype=expression(s)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("m = 1") +
theme(
axis.title.x = element_text(size=18),
axis.title.y = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)
)
p_100GR
# Arrange the plots side by side using plot_grid
combined_plot <- plot_grid(p_EGR, p_100GR + theme(plot.margin = margin(l = 23)),
labels = "AUTO",
label_size = 20,
ncol = 2,
align = "h"  # Horizontal alignment
)
combined_plot
ggsave("s_timefix.png", plot = combined_plot, width = 16, height = 6, units = "in")
# Statistical tests
shapiro.test(low_100GR$time-2000)
# p-value = 2.2e-16 => not gaussian
hist(as.vector(low_100GR$time-2000), probability = TRUE)
shapiro.test(mid_100GR$time-2000)
# p-value = 6.645e-08 => not gaussian
hist(as.vector(mid_100GR$time-2000), probability = TRUE)
shapiro.test(high_100GR$time-2000)
# p-value = 1.645e-07 => not gaussian
hist(as.vector(high_100GR$time-2000), probability = TRUE)
kruskal.test(time -2000 ~ factor(s), data = merged_100GR)
# p-value < 2.2e-16 ==> There's a significiant != between some groups
dunn.test(merged_100GR$time - 2000, factor(merged_100GR$s), method = "bonferroni")
# Statistical tests
shapiro.test(low_EGR$time-2000)
# p-value = 1.393e-14 => not gaussian
hist(as.vector(low_EGR$time-2000), probability = TRUE)
shapiro.test(mid_EGR$time-2000)
# p-value = 1.876e-05 => not gaussian
hist(as.vector(mid_EGR$time-2000), probability = TRUE)
shapiro.test(high_EGR$time-2000)
# p-value = 9.185e-06 => not gaussian
hist(as.vector(high_EGR$time-2000), probability = TRUE)
kruskal.test(time -2000 ~ factor(s), data = merged_EGR)
# p-value < 2.2e-16 ==> There's a significiant != between some groups
dunn.test(merged_EGR$time - 2000, factor(merged_EGR$s), method = "bonferroni")
rm(list=ls())
shapiro.test(mid_EGR$time-2000) # not gaussian
shapiro.test(high_EGR$time-2000)# not gaussian
mean(mid_EGR$time-2000)
library(ggplot2)
library(sjPlot)
library(RColorBrewer)
library(dplyr)
library(readr)
library(cowplot)
library(dunn.test)
########################################################################
rm(list=ls())
low_100GR <- read.table("fix_100GR_0p02.txt", header = FALSE, col.names = "time")
low_100GR$s = "0.02"
mid_100GR <- read.table("fix_100GR_0p1.txt", header = FALSE, col.names = "time")
mid_100GR$s = "0.1"
high_100GR <- read.table("fix_100GR_0p5.txt", header = FALSE, col.names = "time")
high_100GR$s = "0.5"
setwd("~/Documents/projet_sln/plot_paper/supp/h_timefix")
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('dplyr', quietly = T)) install.packages('dyplr');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('dunn.test', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(sjPlot)
library(RColorBrewer)
library(dplyr)
library(readr)
library(cowplot)
library(dunn.test)
########################################################################
rm(list=ls())
t_100GR_low <- read.table("fix_100GR_0p2.txt", header = FALSE, col.names = "time")
t_100GR_low$m = "0.01"
t_EGR_low <- read.table("fix_EGR_0p2.txt", header = FALSE, col.names = "time")
t_EGR_low$m = "1"
t_low <- rbind(t_100GR_low, t_EGR_low)
t_100GR_mid <- read.table("fix_100GR_0p4.txt", header = FALSE, col.names = "time")
t_100GR_mid$m = "0.01"
t_EGR_mid <- read.table("fix_EGR_0p4.txt", header = FALSE, col.names = "time")
t_EGR_mid$m = "1"
t_mid <- rbind(t_100GR_mid, t_EGR_mid)
t_100GR_high <- read.table("fix_100GR_0p5.txt", header = FALSE, col.names = "time")
t_100GR_high$m = "0.01"
t_EGR_high <- read.table("fix_EGR_0p5.txt", header = FALSE, col.names = "time")
t_EGR_high$m = "1"
t_high <- rbind(t_100GR_high, t_EGR_high)
t_low_plot = ggplot(t_low, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("h = 0.2") +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none")
t_low_plot
t_mid_plot = ggplot(t_mid, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("h = 0.4 (control)") +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
legend.position = "top"
)
t_mid_plot
t_high_plot = ggplot(t_high, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("h = 0.5") +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
) +
guides(color = "none", fill = "none")
t_high_plot
# Extract the legend from the main plot
legend_only <- get_legend(t_mid_plot)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
t_low_plot + theme(plot.margin = margin(l = 23)),
t_mid_plot + theme(legend.position = "none", plot.margin = margin(l = 23)),
t_high_plot + theme(plot.margin = margin(l = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 2, labels = c("A","B","C"), label_size = 20
)
combined_plot
png('h_timefix.png',width=16,height=8,units="in",bg = "white", res=300)
combined_plot
dev.off()
kruskal.test(time -2000 ~ factor(m), data = t_low)
kruskal.test(time -2000 ~ factor(m), data = t_mid)
kruskal.test(time -2000 ~ factor(m), data = t_high)
# Test pour m fixé et h !=
t_low$h = 0.2
t_mid$h = 0.4
t_high$h = 0.5
merged_t = rbind(t_low, t_mid, t_high)
t_EGR = merged_t %>% filter(m == 1)
kruskal.test(time - 2000 ~ factor(h), data = t_EGR)
# p-value < 2.2e-16 ==> significiant != between some groups
dunn.test(t_EGR$time - 2000, factor(t_EGR$h), method = "bonferroni") # All different
t_100GR = merged_t %>% filter(m == 0.01)
kruskal.test(time - 2000 ~ factor(h), data = t_100GR)
# p-value < 2.2e-16 ==> No significiant != between some groups
dunn.test(t_100GR$time - 2000, factor(t_100GR$h), method = "bonferroni") # All different
