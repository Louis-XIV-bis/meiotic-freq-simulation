scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "(branch length)"),
color = "m (meiotic frequency)",
fill = "m (meiotic frequency)",
linetype = "m (meiotic frequency)") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 22),
legend.text = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.text.y = element_blank()
) +
scale_y_continuous(limits = y_axis_limits)
pi_sln
# Arrange the plots side by side using plot_grid
combined_plot <- plot_grid(pi_neutral, pi_sln + theme(plot.margin = margin(l = 23)),
labels = "AUTO",
label_size = 20,
ncol = 2,
align = "h",  # Horizontal alignment
rel_widths = c(1, 1.3)  # Adjust relative widths to account for the legend
)
combined_plot
ggsave("pi_control.png", plot = combined_plot, width = 16, height = 6, units = "in")
rm(list=ls())
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/2-two_chrms")
#!/usr/bin/env Rscript
## Author : Louis OLLIVIER ~ louis.ollivier@universite-paris-saclay.fr
## Université Paris-Saclay
## Lab : LISN ~ UMR9015 ~ BIOINFO team
###### Package initialization  ----------------------------------------
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('cowplot', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
########################################################################
rm(list=ls())
windows = seq(1,2000000,length.out=99)
########################################################################
# Upload, process and store csv data to tibble
GR_list = c("EGR", "100GR")
for (GR in GR_list){
data =  read_csv(paste0("pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
pi_table
rm(EGR,`100GR`)
########################################################################
# Create plot #
# Create color palette
colors <- c("#1B9E77","#E7298A")
# Using the extracted color palette for both geom_line and geom_ribbon
pi = ggplot(pi_table, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "(branch length)"),
color="Meiotic frequency",
fill="Meiotic frequency",
linetype="Meiotic frequency") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18)) +
geom_vline(xintercept = 1.0, linetype = "dashed", color = "black")
pi
# Adding labels
pi = ggdraw() +
draw_plot(pi, width = 1, height = 1) +
draw_text("Chromosome 1", x = 0.27, y = 0.92, size = 18, color = "black") +
draw_text("Chromosome 2", x = 0.61, y = 0.92, size = 18, color = "black")
pi
png('pi_twochrms.png',width=14,height=6,units="in",bg = "white", res=600)
pi
dev.off()
# Statistical tests on the second chromosome to see if the delta pi is significant
# supposed that it's constant for the whole chromosome
chr2_data_EGR = pi_table %>%  # m = 1
filter(submodel == 1 & windows > 1000000)
chr2_pi_EGR <- as.numeric(chr2_data_EGR$mean)
hist(chr2_pi_EGR, probability = TRUE)
shapiro.test(chr2_pi_EGR)
# p-value = 0.7435 => gaussian
chr2_data_100GR = pi_table %>%  # m = 0.01
filter(submodel == 0.01 & windows > 1000000)
chr2_pi_100GR <- as.numeric(chr2_data_100GR$mean)
hist(chr2_pi_100GR, probability = TRUE)
shapiro.test(chr2_pi_100GR)
# p-value = 0.3398 => gaussian
t.test(chr2_pi_EGR, chr2_pi_100GR, alternative="greater")
#!/usr/bin/env Rscript
## Author : Louis OLLIVIER ~ louis.ollivier@universite-paris-saclay.fr
## Université Paris-Saclay
## Lab : LISN ~ UMR9015 ~ BIOINFO team
###### Package initialization  ----------------------------------------
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('cowplot', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
########################################################################
# Function that upload and format the data
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=999)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
#!/usr/bin/env Rscript
## Author : Louis OLLIVIER ~ louis.ollivier@universite-paris-saclay.fr
## Université Paris-Saclay
## Lab : LISN ~ UMR9015 ~ BIOINFO team
###### Package initialization  ----------------------------------------
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('cowplot', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
########################################################################
# Function that upload and format the data
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=999)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/3-4-rho_sln/3-s")
#!/usr/bin/env Rscript
## Author : Louis OLLIVIER ~ louis.ollivier@universite-paris-saclay.fr
## Université Paris-Saclay
## Lab : LISN ~ UMR9015 ~ BIOINFO team
###### Package initialization  ----------------------------------------
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('cowplot', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
########################################################################
# Function that upload and format the data
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=999)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
#!/usr/bin/env Rscript
## Author : Louis OLLIVIER ~ louis.ollivier@universite-paris-saclay.fr
## Université Paris-Saclay
## Lab : LISN ~ UMR9015 ~ BIOINFO team
###### Package initialization  ----------------------------------------
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('cowplot', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
########################################################################
# Function that upload and format the data
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=99)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr1 = pi_table_ctrl %>% filter(windows < 1000000)
pi_table_fav = csv_to_tibble(GR_list, "high_s", windows)
pi_fav_chr1 = pi_table_fav %>% filter(windows < 1000000)
pi_table_unfav = csv_to_tibble(GR_list, "low_s", windows)
pi_unfav_chr1 = pi_table_unfav %>% filter(windows < 1000000)
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr2 = pi_table_ctrl %>% filter(windows > 1000000)
pi_table_fav = csv_to_tibble(GR_list, "high_s", windows)
pi_fav_chr2 = pi_table_fav %>% filter(windows > 1000000)
pi_table_unfav = csv_to_tibble(GR_list, "low_s", windows)
pi_unfav_chr2 = pi_table_unfav %>% filter(windows > 1000000)
########################################################################
# Create plots individually #
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(pi_table_ctrl$ymin, pi_table_fav$ymin, pi_table_unfav$ymin)),
max(c(pi_table_ctrl$ymax, pi_table_fav$ymax, pi_table_unfav$ymax)))
# Create color palette
num_conditions <- length(unique(pi_table_ctrl$submodel))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
# Using the extracted color palette for both geom_line and geom_ribbon
plot_unfav_chr1 = ggplot(pi_unfav_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "(branch length)")) +
theme_light() +
ggtitle("s = 0.02") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_unfav_chr1
plot_ctrl_chr1 = ggplot(pi_ctrl_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ " (branch length)"),
color = "m (meiotic frequency)",
fill = "m (meiotic frequency)",
linetype = "m (meiotic frequency)") +
theme_light() +
ggtitle("s = 0.1") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
legend.position = "top"
) +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr1
plot_fav_chr1 = ggplot(pi_fav_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)") +
theme_light() +
ggtitle("s = 0.5") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_fav_chr1
# Using the extracted color palette for both geom_line and geom_ribbon
plot_unfav_chr2 = ggplot(pi_unfav_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "m (meiotic frequency)",
y = expression(pi ~ "(branch length)")) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_unfav_chr2
plot_ctrl_chr2 = ggplot(pi_ctrl_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "m (meiotic frequency)",
y = expression(pi ~ " (branch length)"),
color = "m (meiotic frequency)",
fill = "m (meiotic frequency)",
linetype = "m (meiotic frequency)") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr2
plot_fav_chr2 = ggplot(pi_fav_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "m (meiotic frequency)") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_fav_chr2
# Extract the legend from the main plot
legend_only <- get_legend(plot_ctrl_chr1)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
plot_unfav_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_fav_chr1 + theme(plot.margin = margin(l = 23)),
plot_unfav_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_ctrl_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_fav_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 3, labels = c("A","B","C","D","E","F"), label_size = 20
)
combined_plot
png('pi_sln_s_wg.png',width=16,height=12,units="in",bg = "white", res=300)
combined_plot
dev.off()
