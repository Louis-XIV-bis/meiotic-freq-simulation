axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_high_chr2
# Extract the legend from the main plot
legend_only <- get_legend(plot_ctrl_chr1)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
plot_low_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_high_chr1 + theme(plot.margin = margin(l = 23)),
plot_low_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_ctrl_chr2 + theme(legend.position = "none", plot.margin = margin(l = 23, t = 23)),
plot_high_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 3, labels = c("A","B","C","D","E","F"), label_size = 20
)
combined_plot
png('pi_sln_rho_wg.png',width=16,height=12,units="in",bg = "white", res=600)
combined_plot
dev.off()
setwd("~/Documents/projet_sln/plot_paper/var_sln/rho")
#!/usr/bin/env Rscript
## Author : Louis OLLIVIER ~ louis.ollivier@universite-paris-saclay.fr
## UniversitÃ© Paris-Saclay
## Lab : LISN ~ UMR9015 ~ BIOINFO team
###### Package initialization  ----------------------------------------
if (!require('ggplot2', quietly = T)) install.packages('ggplot2');
if (!require('readr', quietly = T)) install.packages('readr');
if (!require('tibble', quietly = T)) install.packages('tibble');
if (!require('dplyr', quietly = T)) install.packages('dplyr');
if (!require('sjPlot', quietly = T)) install.packages('sjPlot');
if (!require('RColorBrewer', quietly = T)) install.packages('RColorBrewer');
if (!require('cowplot', quietly = T)) install.packages('cowplot');
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
########################################################################
# Function that upload and format the data
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=499)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr1 = pi_table_ctrl %>% filter(windows < 1000000)
pi_table_fav = csv_to_tibble(GR_list, "fav", windows)
pi_low_chr1 = pi_table_fav %>% filter(windows < 1000000)
pi_table_unfav = csv_to_tibble(GR_list, "unfav", windows)
pi_high_chr1 = pi_table_unfav %>% filter(windows < 1000000)
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr2 = pi_table_ctrl %>% filter(windows > 1000000)
pi_table_low = csv_to_tibble(GR_list, "fav", windows)
pi_low_chr2 = pi_table_low %>% filter(windows > 1000000)
pi_table_high = csv_to_tibble(GR_list, "unfav", windows)
pi_high_chr2 = pi_table_high %>% filter(windows > 1000000)
########################################################################
# Create plots individually #
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(pi_table_ctrl$ymin, pi_table_fav$ymin, pi_table_unfav$ymin)),
max(c(pi_table_ctrl$ymax, pi_table_fav$ymax, pi_table_unfav$ymax)))
# Create color palette
num_conditions <- length(unique(pi_table_ctrl$submodel))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
# Using the extracted color palette for both geom_line and geom_ribbon
plot_low_chr1 = ggplot(pi_low_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "(branch length)")) +
theme_light() +
ggtitle(expression(rho ~ " = 1e-8")) +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_low_chr1
plot_ctrl_chr1 = ggplot(pi_ctrl_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ " (branch length)"),
color = "Meiotic frequency",
fill = "Meiotic frequency",
linetype = "Meiotic frequency") +
theme_light() +
ggtitle(expression(rho ~ " = 5e-8 (control)")) +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
legend.position = "top"
) +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr1
plot_high_chr1 = ggplot(pi_high_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)") +
theme_light() +
ggtitle(expression(rho ~ " = 1e-7")) +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_high_chr1
plot_low_chr2 = ggplot(pi_low_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)",
y = expression(pi ~ "(branch length)")) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_low_chr2
plot_ctrl_chr2 = ggplot(pi_ctrl_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)",
y = expression(pi ~ " (branch length)"),
color = "Meiotic frequency",
fill = "Meiotic frequency",
linetype = "Meiotic frequency") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr2
plot_high_chr2 = ggplot(pi_high_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_high_chr2
# Extract the legend from the main plot
legend_only <- get_legend(plot_ctrl_chr1)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
plot_low_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_high_chr1 + theme(plot.margin = margin(l = 23)),
plot_low_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_ctrl_chr2 + theme(legend.position = "none", plot.margin = margin(l = 23, t = 23)),
plot_high_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 3, labels = c("A","B","C","D","E","F"), label_size = 20
)
combined_plot
png('pi_sln_rho_wg.png',width=16,height=12,units="in",bg = "white", res=300)
combined_plot
dev.off()
setwd("~/Documents/projet_sln/plot_paper/var_sln/s")
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
rm(list=ls())
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
########################################################################
# Create tibble from csv data
windows = seq(1,2000000,length.out=499)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr1 = pi_table_ctrl %>% filter(windows < 1000000)
pi_table_fav = csv_to_tibble(GR_list, "fav", windows)
pi_fav_chr1 = pi_table_fav %>% filter(windows < 1000000)
pi_table_unfav = csv_to_tibble(GR_list, "unfav", windows)
pi_unfav_chr1 = pi_table_unfav %>% filter(windows < 1000000)
pi_table_ctrl = csv_to_tibble(GR_list, "ctrl", windows)
pi_ctrl_chr2 = pi_table_ctrl %>% filter(windows > 1000000)
pi_table_fav = csv_to_tibble(GR_list, "fav", windows)
pi_fav_chr2 = pi_table_fav %>% filter(windows > 1000000)
pi_table_unfav = csv_to_tibble(GR_list, "unfav", windows)
pi_unfav_chr2 = pi_table_unfav %>% filter(windows > 1000000)
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(pi_table_ctrl$ymin, pi_table_fav$ymin, pi_table_unfav$ymin)),
max(c(pi_table_ctrl$ymax, pi_table_fav$ymax, pi_table_unfav$ymax)))
# Create color palette
num_conditions <- length(unique(pi_table_ctrl$submodel))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
# Using the extracted color palette for both geom_line and geom_ribbon
plot_unfav_chr1 = ggplot(pi_unfav_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "(branch length)")) +
theme_light() +
ggtitle("s = 0.02") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_unfav_chr1
plot_ctrl_chr1 = ggplot(pi_ctrl_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ " (branch length)"),
color = "Meiotic frequency",
fill = "Meiotic frequency",
linetype = "Meiotic frequency") +
theme_light() +
ggtitle("s = 0.1 (control)") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
legend.position = "top"
) +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr1
plot_fav_chr1 = ggplot(pi_fav_chr1, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)") +
theme_light() +
ggtitle("s = 0.5") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_fav_chr1
# Using the extracted color palette for both geom_line and geom_ribbon
plot_unfav_chr2 = ggplot(pi_unfav_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)",
y = expression(pi ~ "(branch length)")) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_unfav_chr2
plot_ctrl_chr2 = ggplot(pi_ctrl_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)",
y = expression(pi ~ " (branch length)"),
color = "Meiotic frequency",
fill = "Meiotic frequency",
linetype = "Meiotic frequency") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr2
plot_fav_chr2 = ggplot(pi_fav_chr2, aes(x = submodel, y = mean, fill = submodel)) +
geom_boxplot() +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Meiotic frequency (m)") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_fav_chr2
# Extract the legend from the main plot
legend_only <- get_legend(plot_ctrl_chr1)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
plot_unfav_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_fav_chr1 + theme(plot.margin = margin(l = 23)),
plot_unfav_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_ctrl_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_fav_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 3, labels = c("A","B","C","D","E","F"), label_size = 20
)
combined_plot
png('pi_sln_s_wg.png',width=16,height=12,units="in",bg = "white", res=600)
combined_plot
dev.off()
png('pi_sln_s_wg.png',width=16,height=12,units="in",bg = "white", res=300)
combined_plot
png('pi_sln_s_wg.png',width=16,height=12,units="in",bg = "white", res=300)
combined_plot
dev.off()
setwd("~/Documents/projet_sln/plot_paper/supp/rhovar_timefix")
########################################################################
rm(list=ls())
# Done only for neutral (not fav / unfav)
t_100GR <- read.table("fix_100GR.txt", header = FALSE, col.names = "time")
t_100GR$m = "0.01"
t_100GR_low <- read.table("fix_100GR_1e-8.txt", header = FALSE, col.names = "time")
t_100GR_low$m = "0.01"
t_100GR_low <- read.table("fix_100GR_1e-8.txt", header = FALSE, col.names = "time")
t_100GR_low$m = "0.01"
t_10GR_low <- read.table("fix_10GR_1e-8.txt", header = FALSE, col.names = "time")
t_10GR_low$m = "0.1"
t_50GR_low <- read.table("fix_50GR_1e-8.txt", header = FALSE, col.names = "time")
t_50GR_low$m = "0.05"
t_EGR_low <- read.table("fix_EGR_1e-8.txt", header = FALSE, col.names = "time")
t_EGR_low$m = "1"
t_low <- rbind(t_100GR_low, t_50GR_low, t_10GR_low, t_EGR_low)
########################################################################
rm(list=ls())
t_100GR_low <- read.table("fix_100GR_1e-8.txt", header = FALSE, col.names = "time")
t_100GR_low$m = "0.01"
t_10GR_low <- read.table("fix_10GR_1e-8.txt", header = FALSE, col.names = "time")
t_10GR_low$m = "0.1"
t_50GR_low <- read.table("fix_50GR_1e-8.txt", header = FALSE, col.names = "time")
t_50GR_low$m = "0.05"
t_EGR_low <- read.table("fix_EGR_1e-8.txt", header = FALSE, col.names = "time")
t_EGR_low$m = "1"
t_low <- rbind(t_100GR_low, t_50GR_low, t_10GR_low, t_EGR_low)
t_100GR_mid <- read.table("fix_100GR_5e-8.txt", header = FALSE, col.names = "time")
t_100GR_mid$m = "0.01"
t_10GR_mid <- read.table("fix_10GR_5e-8.txt", header = FALSE, col.names = "time")
t_10GR_mid$m = "0.1"
t_50GR_mid <- read.table("fix_50GR_5e-8.txt", header = FALSE, col.names = "time")
t_50GR_mid$m = "0.05"
t_EGR_mid <- read.table("fix_EGR_5e-8.txt", header = FALSE, col.names = "time")
t_EGR_mid$m = "1"
t_mid <- rbind(t_100GR_mid, t_50GR_mid, t_10GR_mid, t_EGR_mid)
t_100GR_high <- read.table("fix_100GR_1e-7.txt", header = FALSE, col.names = "time")
t_100GR_high$m = "0.01"
t_10GR_high <- read.table("fix_10GR_1e-7.txt", header = FALSE, col.names = "time")
t_10GR_high$m = "0.1"
t_50GR_high <- read.table("fix_50GR_1e-7.txt", header = FALSE, col.names = "time")
t_50GR_high$m = "0.05"
t_EGR_high <- read.table("fix_EGR_1e-7.txt", header = FALSE, col.names = "time")
t_EGR_high$m = "1"
t_high <- rbind(t_100GR_high, t_50GR_high, t_10GR_high, t_EGR_high)
t_low_plot = ggplot(t_low, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(s),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho[m]," = 5e-8 (chromosome 2)"))) +
theme(
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5)
)
t_low_plot = ggplot(t_low, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(s),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 1e-8"))) +
theme(
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5)
)
t_low_plot
ggsave("rhovar_timefix.png", plot = t_rhovar)
ggsave("rhovar_timefix.png", plot = t_low_plot)
