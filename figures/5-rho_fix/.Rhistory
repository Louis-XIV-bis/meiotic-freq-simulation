print(result)
p_EGR = ggplot(merged_EGR, aes(x = s, y = time - 2000, fill = s)) +
geom_boxplot() +
labs(x = expression(s),
y = "Fixation time (generations)",
color=expression(s),
fill=expression(s),
linetype=expression(s)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("m = 0.01") +
theme(
axis.title.x = element_text(size=18),
axis.title.y = element_text(size=18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none")
p_EGR
p_100GR = ggplot(merged_100GR, aes(x = s, y = time - 2000, fill = s)) +
geom_boxplot() +
labs(x = expression(s),
y = "Fixation time (generations)",
color=expression(s),
fill=expression(s),
linetype=expression(s)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle("m = 1") +
theme(
axis.title.x = element_text(size=18),
axis.title.y = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)
)
p_100GR
# Arrange the plots side by side using plot_grid
combined_plot <- plot_grid(p_EGR, p_100GR + theme(plot.margin = margin(l = 23)),
labels = "AUTO",
label_size = 20,
ncol = 2,
align = "h"  # Horizontal alignment
)
combined_plot
ggsave("s_timefix.png", plot = combined_plot, width = 16, height = 6, units = "in")
# Statistical tests
shapiro.test(low_100GR$time-2000)
# p-value = 3.638e-16 => not gaussian
hist(as.vector(low_100GR$time-2000), probability = TRUE)
shapiro.test(mid_100GR$time-2000)
# p-value = 1.326e-08 => not gaussian
hist(as.vector(mid_100GR$time-2000), probability = TRUE)
shapiro.test(high_100GR$time-2000)
# p-value = 5.069e-09=> not gaussian
hist(as.vector(high_100GR$time-2000), probability = TRUE)
kruskal.test(time -2000 ~ factor(s), data = merged_100GR)
# p-value < 2.2e-16 ==> There's a significiant != between some groups
dunn.test(merged_100GR$time - 2000, factor(merged_100GR$s), method = "bonferroni")
# Statistical tests
shapiro.test(low_EGR$time-2000)
# p-value = 3.773e-15 => not gaussian
hist(as.vector(low_EGR$time-2000), probability = TRUE)
shapiro.test(mid_EGR$time-2000)
# p-value = 0.001881 => not gaussian
hist(as.vector(mid_EGR$time-2000), probability = TRUE)
shapiro.test(high_EGR$time-2000)
# p-value = 1.574e-06 => not gaussian
hist(as.vector(high_EGR$time-2000), probability = TRUE)
kruskal.test(time -2000 ~ factor(s), data = merged_EGR)
# p-value < 2.2e-16 ==> There's a significiant != between some groups
dunn.test(merged_EGR$time - 2000, factor(merged_EGR$s), method = "bonferroni")
shapiro.test(mid_EGR$time-2000) # not gaussian
shapiro.test(high_EGR$time-2000)# not gaussian
mean(mid_EGR$time-2000)
mean(high_EGR$time-2000)
wilcox.test(mid_EGR$time - 2000, high_EGR$time - 2000)
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/supp/rhovar_timefix")
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/supp/rhovar_timefix")
library(ggplot2)
library(sjPlot)
library(RColorBrewer)
library(dplyr)
library(readr)
library(cowplot)
library(dunn.test)
########################################################################
rm(list=ls())
t_100GR_low <- read.table("fix_100GR_1e-8.txt", header = FALSE, col.names = "time")
t_100GR_low$m = "0.01"
t_10GR_low <- read.table("fix_10GR_1e-8.txt", header = FALSE, col.names = "time")
t_10GR_low$m = "0.1"
t_50GR_low <- read.table("fix_50GR_1e-8.txt", header = FALSE, col.names = "time")
t_50GR_low$m = "0.05"
t_EGR_low <- read.table("fix_EGR_1e-8.txt", header = FALSE, col.names = "time")
t_EGR_low$m = "1"
t_low <- rbind(t_100GR_low, t_50GR_low, t_10GR_low, t_EGR_low)
t_100GR_mid <- read.table("fix_100GR_5e-8.txt", header = FALSE, col.names = "time")
t_100GR_mid$m = "0.01"
t_10GR_mid <- read.table("fix_10GR_5e-8.txt", header = FALSE, col.names = "time")
t_10GR_mid$m = "0.1"
t_50GR_mid <- read.table("fix_50GR_5e-8.txt", header = FALSE, col.names = "time")
t_50GR_mid$m = "0.05"
t_EGR_mid <- read.table("fix_EGR_5e-8.txt", header = FALSE, col.names = "time")
t_EGR_mid$m = "1"
t_mid <- rbind(t_100GR_mid, t_50GR_mid, t_10GR_mid, t_EGR_mid)
t_100GR_high <- read.table("fix_100GR_1e-7.txt", header = FALSE, col.names = "time")
t_100GR_high$m = "0.01"
t_10GR_high <- read.table("fix_10GR_1e-7.txt", header = FALSE, col.names = "time")
t_10GR_high$m = "0.1"
t_50GR_high <- read.table("fix_50GR_1e-7.txt", header = FALSE, col.names = "time")
t_50GR_high$m = "0.05"
t_EGR_high <- read.table("fix_EGR_1e-7.txt", header = FALSE, col.names = "time")
t_EGR_high$m = "1"
t_high <- rbind(t_100GR_high, t_50GR_high, t_10GR_high, t_EGR_high)
t_low_plot = ggplot(t_low, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 1e-8"))) +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none")
t_low_plot
t_mid_plot = ggplot(t_mid, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 5e-8 (control)"))) +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
legend.position = "top"
)
t_mid_plot
t_high_plot = ggplot(t_high, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 1e-7"))) +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
) +
guides(color = "none", fill = "none")
t_high_plot
# Extract the legend from the main plot
legend_only <- get_legend(t_mid_plot)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
t_low_plot + theme(plot.margin = margin(l = 23)),
t_mid_plot + theme(legend.position = "none", plot.margin = margin(l = 23)),
t_high_plot + theme(plot.margin = margin(l = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 2, labels = c("A","B","C"), label_size = 20
)
combined_plot
png('rhovar_timefix.png',width=16,height=8,units="in",bg = "white", res=300)
combined_plot
dev.off()
kruskal.test(time -2000 ~ factor(m), data = t_low)
kruskal.test(time -2000 ~ factor(m), data = t_mid)
kruskal.test(time -2000 ~ factor(m), data = t_high)
kruskal.test(time -2000 ~ factor(m), data = t_mid)
View(t_mid)
t_high_plot
library(ggplot2)
library(sjPlot)
library(RColorBrewer)
library(dplyr)
library(readr)
library(cowplot)
library(dunn.test)
########################################################################
rm(list=ls())
t_100GR_low <- read.table("fix_100GR_1e-8.txt", header = FALSE, col.names = "time")
t_100GR_low$m = "0.01"
t_10GR_low <- read.table("fix_10GR_1e-8.txt", header = FALSE, col.names = "time")
t_10GR_low$m = "0.1"
t_50GR_low <- read.table("fix_50GR_1e-8.txt", header = FALSE, col.names = "time")
t_50GR_low$m = "0.05"
t_EGR_low <- read.table("fix_EGR_1e-8.txt", header = FALSE, col.names = "time")
t_EGR_low$m = "1"
t_low <- rbind(t_100GR_low, t_50GR_low, t_10GR_low, t_EGR_low)
t_100GR_mid <- read.table("fix_100GR_5e-8.txt", header = FALSE, col.names = "time")
t_100GR_mid$m = "0.01"
t_10GR_mid <- read.table("fix_10GR_5e-8.txt", header = FALSE, col.names = "time")
t_10GR_mid$m = "0.1"
t_50GR_mid <- read.table("fix_50GR_5e-8.txt", header = FALSE, col.names = "time")
t_50GR_mid$m = "0.05"
t_EGR_mid <- read.table("fix_EGR_5e-8.txt", header = FALSE, col.names = "time")
t_EGR_mid$m = "1"
t_mid <- rbind(t_100GR_mid, t_50GR_mid, t_10GR_mid, t_EGR_mid)
t_100GR_high <- read.table("fix_100GR_1e-7.txt", header = FALSE, col.names = "time")
t_100GR_high$m = "0.01"
t_10GR_high <- read.table("fix_10GR_1e-7.txt", header = FALSE, col.names = "time")
t_10GR_high$m = "0.1"
t_50GR_high <- read.table("fix_50GR_1e-7.txt", header = FALSE, col.names = "time")
t_50GR_high$m = "0.05"
t_EGR_high <- read.table("fix_EGR_1e-7.txt", header = FALSE, col.names = "time")
t_EGR_high$m = "1"
t_high <- rbind(t_100GR_high, t_50GR_high, t_10GR_high, t_EGR_high)
t_low_plot = ggplot(t_low, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 1e-8"))) +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none")
t_low_plot
t_mid_plot = ggplot(t_mid, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 5e-8 (control)"))) +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
legend.position = "top"
)
t_mid_plot
t_high_plot = ggplot(t_high, aes(x = m, y = time - 2000, fill = m)) +
geom_boxplot() +
labs(x = expression(m),
y = "Fixation time (generations)",
color=expression(m),
fill=expression(m),
linetype=expression(m)) +
scale_fill_brewer(palette="Dark2") +
theme_light() +
ggtitle(expression(paste(rho ~ " = 1e-7"))) +
theme(
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 16),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
) +
guides(color = "none", fill = "none")
t_high_plot
# Extract the legend from the main plot
legend_only <- get_legend(t_mid_plot)
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
t_low_plot + theme(plot.margin = margin(l = 23)),
t_mid_plot + theme(legend.position = "none", plot.margin = margin(l = 23)),
t_high_plot + theme(plot.margin = margin(l = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 2, labels = c("A","B","C"), label_size = 20
)
combined_plot
png('rhovar_timefix.png',width=16,height=8,units="in",bg = "white", res=300)
combined_plot
combined_plot
dev.off()
# p-value = 0.01356 ==> significiant != between some groups for ctrl rho
dunn.test(t_mid$time - 2000, factor(t_mid$m), method = "bonferroni")
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/2-two_chrms")
rm(list=ls())
windows = seq(1,2000000,length.out=99)
GR_list = c("EGR", "100GR")
for (GR in GR_list){
data =  read_csv(paste0("pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
pi_table
rm(EGR,`100GR`)
# Create color palette
colors <- c("#1B9E77","#E7298A")
# Using the extracted color palette for both geom_line and geom_ribbon
pi = ggplot(pi_table, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi),
color="Meiotic frequency",
fill="Meiotic frequency",
linetype="Meiotic frequency") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18)) +
geom_vline(xintercept = 1.0, linetype = "dashed", color = "black")
pi
# Adding labels
pi = ggdraw() +
draw_plot(pi, width = 1, height = 1) +
draw_text("Chromosome 1", x = 0.27, y = 0.92, size = 18, color = "black") +
draw_text("Chromosome 2", x = 0.61, y = 0.92, size = 18, color = "black")
pi
pi
# Adding labels
pi = ggdraw() +
draw_plot(pi, width = 1, height = 1) +
draw_text("Chromosome 1", x = 0.27, y = 0.92, size = 18, color = "black") +
draw_text("Chromosome 2", x = 0.61, y = 0.92, size = 18, color = "black")
pi
png('pi_twochrms.png',width=14,height=6,units="in",bg = "white", res=600)
pi
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/2-two_chrms")
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
rm(list=ls())
windows = seq(1,2000000,length.out=199)
GR_list = c("EGR", "100GR")
for (GR in GR_list){
data =  read_csv(paste0("pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
pi_table = bind_rows(EGR,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
windows = seq(1,2000000,length.out=99)
GR_list = c("EGR", "100GR")
for (GR in GR_list){
data =  read_csv(paste0("pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
pi_table
rm(EGR,`100GR`)
# Create color palette
colors <- c("#1B9E77","#E7298A")
# Using the extracted color palette for both geom_line and geom_ribbon
pi = ggplot(pi_table, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi),
color="Meiotic frequency",
fill="Meiotic frequency",
linetype="Meiotic frequency") +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18)) +
geom_vline(xintercept = 1.0, linetype = "dashed", color = "black") +
ylim(-1e-5,8e-5)
pi
windows = seq(1,2000000,length.out=99)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_fix = csv_to_tibble(GR_list, "rhofixe", windows) %>% filter(windows < 1000000)
setwd("~/Documents/meiotic-freq-simulation_site/plot_paper/5-rho_fix")
csv_to_tibble = function(GR_list, subfolder, windows){
for (GR in GR_list){
data =  read_csv(paste0(subfolder,"/pi_",GR,".csv"),col_names = F)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
ymin = mean-sd
ymax = mean+sd
# Create a variable name based on the loop index
GR_table_name = GR
# Assign a value to the dynamically generated variable
assign(GR_table_name, data.frame(windows,mean,ymin,ymax) %>% add_column(submodel=GR, .before=1))
}
rm(data,mean,sd,ymin,ymax,windows)
pi_table = bind_rows(EGR,`10GR`,`50GR`,`100GR`) %>%
as_tibble() %>%
mutate(submodel = case_when(
submodel == "EGR" ~ "1",
submodel == "10GR" ~ "0.1",
submodel == "50GR" ~ "0.05",
submodel == "100GR" ~ "0.01",
TRUE ~ submodel  # Default: no change for other values
))
}
windows = seq(1,2000000,length.out=99)
GR_list = c("EGR", "10GR", "50GR", "100GR")
pi_table_fix = csv_to_tibble(GR_list, "rhofixe", windows) %>% filter(windows < 1000000)
pi_table_fix
pi_table_var = csv_to_tibble(GR_list, "ctrl", windows) %>% filter(windows < 1000000)
pi_table_var
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(min(c(pi_table_fix$ymin, pi_table_var$ymin)),
max(c(pi_table_fix$ymax, pi_table_var$ymax)))
# Create color palette
num_conditions <- length(unique(pi_table_var$submodel))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
# Using the extracted color palette for both geom_line and geom_ribbon
pi_var = ggplot(pi_table_var, aes(x = windows/1000000, y = mean, group = submodel)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = submodel),alpha=0.2) +
geom_line(aes(color = submodel)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi))+
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
ggtitle(expression(rho ~ "= 5e-8")) +
scale_y_continuous(limits = y_axis_limits)
pi_var
