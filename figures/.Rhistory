s0.02 = data_s %>% filter(s == 0.02)
View(s0.02)
# Perform Kruskal-Wallis test for each alpha level
s0.02 = data_s %>% filter(s == 0.02) %>%
kruskal.test(pi ~ alpha)
0
# Perform Kruskal-Wallis test for each alpha level
s0.02 = data_s %>% filter(s == 0.02) %>%
kruskal.test(pi ~ alpha, data = data_s)
# Perform Kruskal-Wallis test for each alpha level
s0.02 = data_s %>% filter(s == 0.02)
s0.02
kruskal.test(pi ~ alpha, data = s0.02)
# Loop through each unique value of s and perform Kruskal-Wallis test
for (s_value in unique_s_values) {
# Filter data for the current s value
filtered_data <- data_s %>% filter(s == s_value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(pi ~ alpha, data = filtered_data)
# Print the results
cat("Results for s =", s_value, ":\n")
print(test_result)
cat("\n")
}
unique_s_values <- unique(data_s$s)
# Loop through each unique value of s and perform Kruskal-Wallis test
for (s_value in unique_s_values) {
# Filter data for the current s value
filtered_data <- data_s %>% filter(s == s_value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(pi ~ alpha, data = filtered_data)
# Print the results
cat("Results for s =", s_value, ":\n")
print(test_result)
cat("\n")
}
# Perform Kruskal-Wallis test for each alpha level
s0.02 = data_s %>% filter(s == 0.02)
kruskal.test(pi ~ alpha, data = s0.02)
}
# Perform Kruskal-Wallis test for each alpha level
unique_s_values <- unique(data_s$s)
# Loop through each unique value of s and perform Kruskal-Wallis test
for (s_value in unique_s_values) {
# Filter data for the current s value
filtered_data <- data_s %>% filter(s == s_value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(pi ~ alpha, data = filtered_data)
# Print the results
cat("Results for s =", s_value, ":\n")
print(test_result)
cat("\n")
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
cat("No significant difference between groups for s", s_value,  "\n")
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
} else {
cat("No significant difference between groups for s", s_value,  "\n")
}
cat("\n")
# Loop through each unique value of s and perform Kruskal-Wallis test
for (s_value in unique_s_values) {
# Filter data for the current s value
filtered_data <- data_s %>% filter(s == s_value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(pi ~ alpha, data = filtered_data)
# Print the results
cat("Results for s =", s_value, ":\n")
print(test_result)
cat("\n")
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
} else {
cat("No significant difference between groups for s", s_value,  "\n")
}
cat("\n")
}
# Loop through each unique value of s and perform Kruskal-Wallis test
for (s_value in unique_s_values) {
# Filter data for the current s value
filtered_data <- data_s %>% filter(s == s_value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(pi ~ alpha, data = filtered_data)
# Print the results
cat("Results for s =", s_value, ":\n")
print(test_result)
cat("\n")
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups for s = ", s_value,  "\n")
} else {
cat("No significant difference between groups \n")
}
cat("\n")
}
dunn_result <- dunn.test(filtered_data$pi, filtered_data$alpha, kw = TRUE)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups for s = ", s_value,  "\n")
dunn_result <- dunn.test(filtered_data$pi, filtered_data$alpha, kw = TRUE)
} else {
cat("No significant difference between groups \n")
}
cat("\n")
# Loop through each unique value of s and perform Kruskal-Wallis test
for (s_value in unique_s_values) {
# Filter data for the current s value
filtered_data <- data_s %>% filter(s == s_value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(pi ~ alpha, data = filtered_data)
# Print the results
cat("Results for s =", s_value, ":\n")
print(test_result)
cat("\n")
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups for s = ", s_value,  "\n")
dunn_result <- dunn.test(filtered_data$pi, filtered_data$alpha, kw = TRUE)
} else {
cat("No significant difference between groups \n")
}
cat("\n")
}
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Perform Kruskal-Wallis test for each alpha level
perform_tests <- function(data, group_var, value_var, group_col, rho_col = NULL) {
# Check if the grouping column exists
if (!(group_var %in% names(data))) stop("Group variable not found in data.")
if (!(value_var %in% names(data))) stop("Value variable not found in data.")
# Get unique values of the grouping variable
unique_values <- unique(data[[group_col]])
# Loop through each unique value and perform Kruskal-Wallis test
for (value in unique_values) {
# Filter data for the current grouping value
filtered_data <- data %>% filter(!!sym(group_col) == value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(as.formula(paste(value_var, "~", group_var)), data = filtered_data)
# Print the results
cat("Results for", group_col, "=", value, ":\n")
print(test_result)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
# Perform Dunn's test for pairwise comparisons
dunn_result <- dunn.test::dunn.test(filtered_data[[value_var]], filtered_data[[group_var]], kw = TRUE)
# Print Dunn's test results
cat("Dunn's test results:\n")
print(dunn_result)
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
}
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Perform Dunn's test for pairwise comparisons
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]], kw = TRUE)
# Perform Kruskal-Wallis test for each alpha level
perform_tests <- function(data, group_var, value_var, group_col, rho_col = NULL) {
# Check if the grouping column exists
if (!(group_var %in% names(data))) stop("Group variable not found in data.")
if (!(value_var %in% names(data))) stop("Value variable not found in data.")
# Get unique values of the grouping variable
unique_values <- unique(data[[group_col]])
# Loop through each unique value and perform Kruskal-Wallis test
for (value in unique_values) {
# Filter data for the current grouping value
filtered_data <- data %>% filter(!!sym(group_col) == value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(as.formula(paste(value_var, "~", group_var)), data = filtered_data)
# Print the results
cat("Results for", group_col, "=", value, ":\n")
print(test_result)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
# Perform Dunn's test for pairwise comparisons
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]], kw = TRUE)
# Print Dunn's test results
cat("Dunn's test results:\n")
print(dunn_result)
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
}
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Perform Dunn's test for pairwise comparisons
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]])
# Print Dunn's test results
cat("Dunn's test results:\n")
# Perform Kruskal-Wallis test for each alpha level
perform_tests <- function(data, group_var, value_var, group_col, rho_col = NULL) {
# Check if the grouping column exists
if (!(group_var %in% names(data))) stop("Group variable not found in data.")
if (!(value_var %in% names(data))) stop("Value variable not found in data.")
# Get unique values of the grouping variable
unique_values <- unique(data[[group_col]])
# Loop through each unique value and perform Kruskal-Wallis test
for (value in unique_values) {
# Filter data for the current grouping value
filtered_data <- data %>% filter(!!sym(group_col) == value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(as.formula(paste(value_var, "~", group_var)), data = filtered_data)
# Print the results
cat("Results for", group_col, "=", value, ":\n")
print(test_result)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
# Perform Dunn's test for pairwise comparisons
cat("Dunn's test results:\n")
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]])
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
}
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Perform Kruskal-Wallis test for each alpha level
perform_tests <- function(data, group_var, value_var, group_col) {
# Check if the grouping column exists
if (!(group_var %in% names(data))) stop("Group variable not found in data.")
if (!(value_var %in% names(data))) stop("Value variable not found in data.")
# Get unique values of the grouping variable
unique_values <- unique(data[[group_col]])
# Loop through each unique value and perform Kruskal-Wallis test
for (value in unique_values) {
# Filter data for the current grouping value
filtered_data <- data %>% filter(!!sym(group_col) == value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(as.formula(paste(value_var, "~", group_var)), data = filtered_data)
# Print the results
cat("Results for", group_col, "=", value, ":\n")
print(test_result)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
# Perform Dunn's test for pairwise comparisons
cat("Dunn's test results:\n")
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]])
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
}
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
perform_tests(data_s, group_var = "s", value_var = "pi", group_col = "alpha")
# Compare pi for each alpha for a given s
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Compare pi for each alpha for a given s
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Compare pi for each alpha for a given s
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Compare pi for each s for a given alpha
perform_tests(data_s, group_var = "s", value_var = "pi", group_col = "alpha")
# Compare pi for each alpha for a given s
perform_tests(data_s, group_var = "alpha", value_var = "pi", group_col = "s")
# Compare pi for each s for a given alpha
perform_tests(data_s, group_var = "s", value_var = "pi", group_col = "alpha")
check_normality(data_s, "s", "pi")
rm(list=ls())
# Load full dataset
full_dataset = read_csv('../data/t_pichr2_full_merged.csv') %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(t = t - 2000)
full_dataset
# Function to test if the distribution of a variable is Gaussian for each combination of `group_var` and `alpha`
check_normality <- function(data, group_var, test_var) {
# Perform Shapiro-Wilk test for normality for each combination of `group_var` and `alpha`
normality_results <- data %>%
group_by(!!sym(group_var), alpha) %>%
summarize(
shapiro_p_value = shapiro.test(!!sym(test_var))$p.value,  # Shapiro-Wilk test for the specified variable
is_gaussian = ifelse(shapiro.test(!!sym(test_var))$p.value > 0.05, "Yes", "No")  # Normality check
)
# Return the results
return(normality_results)
}
perform_tests <- function(data, group_var, value_var, group_col) {
# Check if the grouping column exists
if (!(group_var %in% names(data))) stop("Group variable not found in data.")
if (!(value_var %in% names(data))) stop("Value variable not found in data.")
# Get unique values of the grouping variable
unique_values <- unique(data[[group_col]])
# Loop through each unique value and perform Kruskal-Wallis test
for (value in unique_values) {
# Filter data for the current grouping value
filtered_data <- data %>% filter(!!sym(group_col) == value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(as.formula(paste(value_var, "~", group_var)), data = filtered_data)
# Print the results
cat("Results for", group_col, "=", value, ":\n")
print(test_result)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
# Perform Dunn's test for pairwise comparisons
cat("Dunn's test results:\n")
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]])
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
}
### pi chr 2 alpha = 0.01 vs alpha == 1 ###
data_fig2 = full_dataset %>%
filter(s == 0.05 & rho == '5e-08' & rho_scaled != 'rho_fixe', h == 0.5 & (alpha == 1 | alpha == 0.01))
data_fig2
check_normality(data_fig2, "window", "pi")
# non parametric test to be exact because only 1 gaussian
pi_alpha_1 <- data_fig2 %>% filter(alpha == 1) %>% pull(pi)
pi_alpha_0.01 <- data_fig2 %>% filter(alpha == 0.01) %>% pull(pi)
wilcox.test(pi_alpha_1, pi_alpha_0.01)
check_normality(data_fig2, "window", "t")
# non parametric test to be exact
t_alpha_1 <- data_fig2 %>% filter(alpha == 1) %>% pull(t)
t_alpha_0.01 <- data_fig2 %>% filter(alpha == 0.01) %>% pull(t)
wilcox.test(t_alpha_1, t_alpha_0.01)
rm(pi_alpha_1, pi_alpha_0.01, t_alpha_1, t_alpha_0.01, data_fig2)
check_normality(data_s, "s", "pi")
### Compare pi for a given s for each alpha and the opposite ###
data_s = full_dataset %>%
filter(rho == '5e-08' & rho_scaled != 'rho_fixe', h == 0.5)
check_normality(data_s, "s", "pi")
### Compare pi for a given s for each alpha and the opposite ###
check_normality(data_s, "s", "t")
t = data_s %>% filter(alpha == 0.05)
View(data_s)
t = data_s %>% filter(alpha == 0.5)
t = data_s %>% filter(alpha == 0.5)
t = data_s %>% filter(alpha == 0.1)
t = data_s %>% filter(alpha == 0.1 & s = 0.05)
t = data_s %>% filter(alpha == 0.1 & s == 0.05)
hist(t$t)
shapiro.test(t$t)
View(t)
# Will do kruskal walis and dunn.test because not all of them are gaussian
# Compare t for each alpha for a given s
perform_tests(data_s, group_var = "alpha", value_var = "t", group_col = "s")
# Compare t for each s for a given alpha
perform_tests(data_s, group_var = "s", value_var = "t", group_col = "alpha")
# Will do kruskal walis and dunn.test because not all of them are gaussian
# Compare t for each alpha for a given s
perform_tests(data_s, group_var = "alpha", value_var = "t", group_col = "s")
### Compare pi for a given s for each alpha and the opposite ###
data_rho = full_dataset %>%
filter(s == 0.05 & rho_scaled != 'rho_fixe', h == 0.5)
check_normality(data_rho, "rho", "pi")
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter(s ==  0.05 & rho_scaled != 'rho_fixe', h == 0.5)
check_normality(data_s, "rho", "pi")
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter(s ==  0.05 & rho_scaled != 'rho_fixe', h == 0.5)
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter(s ==  0.05 & rho_scaled != 'rho_fixe', h == 0.5)
check_normality(data_s, "rho", "pi")
check_normality(data_rho, "rho", "pi")
# Compare pi for each alpha for a given rho
perform_tests(data_rho, group_var = "alpha", value_var = "pi", group_col = "rho")
# Compare pi for each rho for a given alpha
perform_tests(data_rho, group_var = "rho", value_var = "pi", group_col = "alpha")
### Compare t for a given rho for each alpha and the opposite ###
check_normality(data_rho, "rho", "t")
### Compare pi for a given rho for each alpha and the opposite ###
data_rhom = full_dataset %>%
filter(s ==  0.05, h == 0.5)
View(data_rhom)
### Compare pi for a given rho for each alpha and the opposite ###
data_h = full_dataset %>%
filter(s ==  0.05 & rho_scaled != 'rho_fixe')
View(data_h)
### Compare pi for a given rho for each alpha and the opposite ###
data_h = full_dataset %>%
filter(s ==  0.05 & rho_scaled != 'rho_fixe' & rho == '5e-08')
check_normality(data_h, "h", "pi")
# Compare pi for each alpha for a given h
perform_tests(data_h, group_var = "alpha", value_var = "pi", group_col = "h")
# Compare pi for each h for a given alpha
perform_tests(data_h, group_var = "h", value_var = "pi", group_col = "alpha")
### Compare t for a given h for each alpha and the opposite ###
check_normality(data_h, "h", "t")
setwd("~/Documents/meiotic-freq-simulation/figures/supp/rhofix_timefix")
rm(list=ls())
# Subset data for chr1
data_t = read_csv('../../../data/t_merged.csv') %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho == 'rho_fixe')) %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd) %>%
mutate(label = case_when(rho == '5e-08' ~ 'rho', rho == 'rho_fixe' ~ 'rho_m', TRUE ~ 'other'))
data_t
# Subset data for chr1
data_t = read_csv('../../../data/t_merged.csv') %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho == '0,00000005')) %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd) %>%
mutate(label = case_when(rho == '5e-08' ~ 'rho', rho == '0,00000005' ~ 'rho_m', TRUE ~ 'other'))
data_t
setwd("~/Documents/meiotic-freq-simulation/figures")
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_fixe == 'rho_fixe'))
library(readr)
library(tibble)
library(dplyr)
library(dunn.test)
rm(list=ls())
# Load full dataset
full_dataset = read_csv('../data/t_pichr2_full_merged.csv') %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(t = t - 2000)
full_dataset
# Function to test if the distribution of a variable is Gaussian for each combination of `group_var` and `alpha`
check_normality <- function(data, group_var, test_var) {
# Perform Shapiro-Wilk test for normality for each combination of `group_var` and `alpha`
normality_results <- data %>%
group_by(!!sym(group_var), alpha) %>%
summarize(
shapiro_p_value = shapiro.test(!!sym(test_var))$p.value,  # Shapiro-Wilk test for the specified variable
is_gaussian = ifelse(shapiro.test(!!sym(test_var))$p.value > 0.05, "Yes", "No")  # Normality check
)
# Return the results
return(normality_results)
}
perform_tests <- function(data, group_var, value_var, group_col) {
# Check if the grouping column exists
if (!(group_var %in% names(data))) stop("Group variable not found in data.")
if (!(value_var %in% names(data))) stop("Value variable not found in data.")
# Get unique values of the grouping variable
unique_values <- unique(data[[group_col]])
# Loop through each unique value and perform Kruskal-Wallis test
for (value in unique_values) {
# Filter data for the current grouping value
filtered_data <- data %>% filter(!!sym(group_col) == value)
# Perform Kruskal-Wallis test
test_result <- kruskal.test(as.formula(paste(value_var, "~", group_var)), data = filtered_data)
# Print the results
cat("Results for", group_col, "=", value, ":\n")
print(test_result)
# Check if p-value is less than 0.05
if (test_result$p.value < 0.05) {
cat("There's a significant difference between some groups\n")
# Perform Dunn's test for pairwise comparisons
cat("Dunn's test results:\n")
dunn.test(filtered_data[[value_var]], filtered_data[[group_var]])
} else {
cat("No significant difference between groups\n")
}
cat("\n")
}
}
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_fixe == 'rho_fixe'))
View(full_dataset)
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_scaled == 'rho_fixe'))
data_rho
View(data_rho)
mutate(rho_scaled = case_when(rho =! 'rho_fixe' ~ 'rho_var', TRUE ~ 'other'))
data_rho
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_scaled == 'rho_fixe'))
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_scaled == 'rho_fixe')) %>%
mutate(rho_scaled = case_when(rho =! 'rho_fixe' ~ 'rho_var', TRUE ~ 'other'))
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_scaled == 'rho_fixe')) %>%
mutate(rho_scaled = case_when(rho_scaled =! 'rho_fixe' ~ 'rho_var', TRUE ~ 'other'))
### Compare pi for a given rho for each alpha and the opposite ###
data_rho = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_scaled == 'rho_fixe')) %>%
mutate(rho_scaled = case_when(rho_scaled == 'rho_fixe' ~ 'rho_fixe', TRUE ~ 'rho_var'))
data_rho
check_normality(data_rho, "rho_scaled", "pi")
# Compare pi for each alpha for a given rho_scaled
perform_tests(data_rho, group_var = "alpha", value_var = "pi", group_col = "rho_scaled")
# Compare pi for each rho_scaled for a given alpha
perform_tests(data_rho, group_var = "rho_scaled", value_var = "pi", group_col = "alpha")
###### Fig 5 ######################
### Compare pi for a given rho_var for each alpha and the opposite ###
data_rho_m = full_dataset %>%
filter((h == 0.5 & s == 0.05) & (rho == '5e-08' | rho_scaled == 'rho_fixe')) %>%
mutate(rho_scaled = case_when(rho_scaled == 'rho_fixe' ~ 'rho_fixe', TRUE ~ 'rho_var'))
data_rho_m
### Compare t for a given rho for each alpha and the opposite ###
check_normality(data_rho_m, "rho_scaled", "t")
# Will do kruskal walis and dunn.test because not all of them are gaussian
# Compare t for each alpha for a given rho_scaled
perform_tests(data_rho_m, group_var = "alpha", value_var = "t", group_col = "rho_scaled")
# Compare t for each rho_scaled for a given alpha
perform_tests(data_rho_m, group_var = "rho_scaled", value_var = "t", group_col = "alpha")
